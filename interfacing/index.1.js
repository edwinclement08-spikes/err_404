var Web3 = require('web3');
var web3 = new Web3();
web3.setProvider(new web3.providers.HttpProvider("http://0.0.0.0:8545"));
// solidity code code


var greeterSource = 'contract mortal { address owner; function mortal() { owner = msg.sender; } function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { string greeting; function greeter(string _greeting) public { greeting = _greeting; } function greet() constant returns (string) { return greeting; } }';

var greeterCompiled = web3.eth.compile.solidity(greeterSource);
// console.log(web3.eth.compile.solidity);

console.log(greeterCompiled);
var greeterContract = web3.eth.contract('[ { "constant": true, "inputs": [], "name": "getCounter", "outputs": [ { "name": "", "type": "uint256", "value": "1" } ], "payable": false, "type": "function" }, { "constant": false, "inputs": [], "name": "decrease", "outputs": [], "payable": false, "type": "function" }, { "constant": false, "inputs": [], "name": "increase", "outputs": [], "payable": false, "type": "function" } ]');



var greeter = greeterContract.new("hello world",{from:web3.eth.accounts[0], data: greeterCompiled.greeter.code, gas: 1000000}, function(e, contract){
    if(!e) {
  
      if(!contract.address) {
        console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
  
      } else {
        console.log("Contract mined! Address: " + contract.address);
        console.log(contract);
      }
  
    }
  })

// var code = compiled.code;
// console.log(compiled);
// // contract json abi, this is autogenerated using solc CLI
// var abi = compiled.info.abiDefinition;
// var myContract;
// function createExampleContract() {
//     // hide create button
//     // let's assume that coinbase is our account
//     web3.eth.defaultAccount = web3.eth.coinbase;
//     console.log(web3.eth.coinbase);
//     // create contract
//     web3.eth.contract(abi).new({data: code}, function (err, contract) {
//         if(err) {
//             console.error(err);
//             return;
//         // callback fires twice, we only want the second call when the contract is deployed
//         } else if(contract.address){
//             myContract = contract;
//             console.log('address: ' + myContract.address);
//         }
//     });
// }
// // function callExampleContract() {
// //     // this should be generated by ethereum
// //     var param = parseInt(document.getElementById('value').value);
// //     // call the contract
// //     var res = myContract.multiply(param);
// //     document.getElementById('result').innerText = res.toString(10);
// // }

// createExampleContract()
